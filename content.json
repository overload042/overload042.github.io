{"meta":{"title":"梁山好岗のBLOG","subtitle":"就算是梦话也无妨，再说给我听听吧","description":"站点描述","author":"梁山好岗","url":"http://yoursite.com","root":"/"},"pages":[{"title":"about","date":"2020-05-04T07:01:20.000Z","updated":"2020-05-04T07:04:46.242Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":""},{"title":"tags","date":"2020-05-04T07:01:36.000Z","updated":"2020-05-04T07:05:32.380Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""},{"title":"categories","date":"2020-05-04T07:01:49.000Z","updated":"2020-05-04T07:06:03.220Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"HTML学习日记1——HTML新增属性","slug":"HTML学习日记1——HTML新增属性","date":"2020-05-14T03:52:04.049Z","updated":"2020-05-14T04:09:26.730Z","comments":true,"path":"2020/05/14/HTML学习日记1——HTML新增属性/","link":"","permalink":"http://yoursite.com/2020/05/14/HTML%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B01%E2%80%94%E2%80%94HTML%E6%96%B0%E5%A2%9E%E5%B1%9E%E6%80%A7/","excerpt":"学习HTML每一天","text":"学习HTML每一天 h5新增标签新增内容： 标签 作用 header 头部标签 nav 导航栏 aside 侧边栏 article 内容标签 section 某个区域 footer 尾部标签 代码举例： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;h5新增标签&lt;/title&gt; &lt;style&gt; header&#123; background-color: pink; height: 188px; width: 800px; margin: 20px auto; border-radius: 15px; &#125; nav&#123; background-color: pink; width: 800px; height: 50px; margin: 10px auto; &#125; aside&#123; width: 500px; height: 700px; background-color: skyblue; float: left; &#125; article&#123; width: 500px; height: 700px; background-color: blueviolet; float: left; &#125; footer&#123; background-color: aquamarine; width: 100%; height: 50px; &#125; section&#123; background-color: burlywood; height: 200px; width: 200px; &#125; div:after&#123; /* 清除浮动 */ clear: both; display: block; content: \"\"; &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;header&gt;头部标签&lt;/header&gt; &lt;nav&gt;导航栏标签&lt;/nav&gt; &lt;div&gt; &lt;aside&gt;侧边栏标签&lt;/aside&gt; &lt;article&gt;内容标签 &lt;section&gt;定义文档的某个区域&lt;/section&gt; &lt;/article&gt; &lt;/div&gt; &lt;footer&gt;尾部标签&lt;/footer&gt; &lt;/body&gt;&lt;/html&gt; video和audio标签video视频标签1234567891011121314151617181920212223&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;video视频标签&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;!-- video视频标签 属性 功能 src 文件地址 autoplay 自动播放 muted 静音播放 controls 添加控制 loop 循环播放 poster 视频封面 width 宽度 height 高度 preload 预加载 --&gt; &lt;video src=\"../../source/video/救赎.mp4\" autoplay=\"autoplay\" muted=\"muted\" controls=\"controls\" loop=\"loop\" poster=\"../../source/img/test.png\"&gt;&lt;/video&gt; &lt;/body&gt;&lt;/html&gt; audio音频标签12345678910111213141516171819202122&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;audio音频标签&lt;/title&gt; &lt;!-- video音频标签 属性 功能 src 文件地址 autoplay 自动播放 muted 静音播放 controls 添加控制 loop 循环播放 preload 预加载 --&gt; &lt;/head&gt; &lt;body&gt; &lt;audio src=\"../../source/audio/希望之花.mp3\" autoplay=\"autoplay\" controls=\"controls\" loop=\"loop\"&gt; 当前浏览器不支持audio &lt;/audio&gt; &lt;/body&gt;&lt;/html&gt; input新增表单123456789101112131415161718192021&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;input新增表单&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;form action=\"\" method=\"\"&gt; &lt;ul&gt; &lt;li&gt;邮箱：&lt;input type=\"email\"&gt;&lt;/li&gt; &lt;li&gt;网址：&lt;input type=\"url\"&gt;&lt;/li&gt; &lt;li&gt;日期：&lt;input type=\"date\"&gt;&lt;/li&gt; &lt;li&gt;时间：&lt;input type=\"time\"&gt;&lt;/li&gt; &lt;li&gt;数量：&lt;input type=\"number\"&gt;&lt;/li&gt; &lt;li&gt;手机号：&lt;input type=\"tel\"&gt;&lt;/li&gt; &lt;li&gt;搜索：&lt;input type=\"search\"&gt;&lt;/li&gt; &lt;li&gt;颜色：&lt;input type=\"color\"&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/form&gt; &lt;/body&gt;&lt;/html&gt; input新增属性1234567891011121314151617181920212223242526272829303132333435&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;input新增属性&lt;/title&gt; &lt;style type=\"text/css\"&gt; /* 搜索placeholder文字格式设置 */ input::placeholder&#123; color: #8A2BE2; &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;form action=\"\" method=\"post\"&gt; &lt;!-- 搜索框 属性 作用 required 不能为空 placeholder 框内背景文字，输入文字消失 autofocus 自动聚焦到框中 autocomplete 输入过的内容提示，默认on 注意： 设置placeholder文字格式：input::placeholder &#123;&#125; --&gt; &lt;input type=\"search\" required=\"required\" placeholder=\"搜索\" autofocus=\"autofocus\" autocomplete=\"off\" /&gt; &lt;br /&gt; &lt;!-- 添加文件表单 属性 作用 multiple 加上这个属性后，就可以一次添加多个文件了 --&gt; &lt;input type=\"file\" multiple=\"multiple\" /&gt; &lt;/form&gt; &lt;/body&gt;&lt;/html&gt;","categories":[{"name":"HTML学习","slug":"HTML学习","permalink":"http://yoursite.com/categories/HTML%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"HTML","slug":"HTML","permalink":"http://yoursite.com/tags/HTML/"}]},{"title":"Java学习日记3——Scanner类、Random类、ArrayList类","slug":"Java学习日记3——Scanner类、Random类、ArrayList类","date":"2020-05-13T06:42:38.515Z","updated":"2020-05-13T12:13:20.878Z","comments":true,"path":"2020/05/13/Java学习日记3——Scanner类、Random类、ArrayList类/","link":"","permalink":"http://yoursite.com/2020/05/13/Java%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B03%E2%80%94%E2%80%94Scanner%E7%B1%BB%E3%80%81Random%E7%B1%BB%E3%80%81ArrayList%E7%B1%BB/","excerpt":"学习Java每一天","text":"学习Java每一天 Scanner类作用：接收键盘输入的内容。 123456789101112131415161718192021222324252627282930313233343536import java.util.Scanner; // 导包语句，写在类的外面，可自动生成/* * Scanner是JDK提供的一个类，详情见API。 * * 引用类型的一般使用步骤 * 1. 导包 * 导包格式：import 包路径.类名称; * 如果要使用的目标类和当前类位于同一包下，则可以省略导包语句不写。 * java.lang包下的内容不需要导包。 * 2. 创建 * 格式：类名称 对象名 = new 类名称(); * 3. 使用 * 对象名.成员方法; * */public class Demo01Scanner &#123; public static void main(String[] args) &#123; // 创建Scanner类的对象 // System.in代表从键盘输入 // 括号中不能为空，System.in是目前的固定写法。 Scanner sc = new Scanner(System.in); // 获取从键盘输入的数字 // sc.nextInt()方法用于获取从键盘输入的数字 int num = sc.nextInt(); System.out.println(\"从键盘输入的数字是：\" + num); // 获取从键盘输入的字符串 // sc.next()方法用于获取从键盘输入的字符串 String str = sc.next(); System.out.println(\"从键盘输入的字符串是：\" + str); /*-----注意：从键盘输入的都是字符串，不同的方法是将字符串转变成不同的类型------*/ &#125;&#125; 匿名对象简单使用匿名对象先创建一个Person类备用 123456789// 定义一个Person类public class Person &#123; String name; public void show() &#123; System.out.println(\"我叫：\" + name); &#125;&#125; 简单使用 1234567891011121314151617/** 匿名对象* 创建格式：new 类名();* 注意事项：匿名对象只能使用唯一的一次。* 使用建议：确定只是用一次，可以使用匿名对象。* */public class Demo01Anonymous &#123; public static void main(String[] args) &#123; Person one = new Person(); one.name = \"高圆圆\"; one.show(); System.out.println(\"===============\"); new Person().name = \"一方通行\"; new Person().show(); // 我叫：null &#125;&#125; 匿名对象与方法匿名对象做参数和返回值 123456789101112131415161718192021222324252627282930313233// 匿名对象的使用举例import java.util.Scanner;public class Demo02Anonymous &#123; public static void main(String[] args) &#123; // 直接传值 System.out.println(\"输入第一个数字：\"); int num1 = new Scanner(System.in).nextInt(); System.out.println(\"输入的数字是：\" + num1); // 匿名对象做方法的参数 methodParam(new Scanner(System.in)); // 匿名对象做返回值 Scanner sc = methodReturn(); System.out.println(\"输入第三个数字：\"); int num3 = sc.nextInt(); System.out.println(\"输入的数字是：\" + num3); &#125; // 匿名对象参数方法 public static void methodParam(Scanner sc) &#123; System.out.println(\"输入第二个数字：\"); int num2 = sc.nextInt(); System.out.println(\"输入的数字是：\" + num2); &#125; // 匿名对象做返回值方法 public static Scanner methodReturn() &#123; return new Scanner(System.in); &#125;&#125; Random类作用：产生随机数 123456789101112131415161718192021222324252627282930313233/* * 使用Random类 * 1. 导包 * 2. 创建 * 格式：Random 对象名 = new Random(); * 3. 使用 * 格式：int 变量名 = 对象名.nextInt(); * 括号内没有参数：返回在int范围内区随机数。 * 括号内有一个参数n：返回区间[0,n)上的一个随机数（可以通过加减数字控制区间）。 * */import java.util.Random;public class Demo01Random &#123; public static void main(String[] args) &#123; // 不设定范围 Random r = new Random(); int num = r.nextInt(); System.out.println(\"得到随机数：\" + num); // 设定范围 for (int i = 0; i &lt; 10; i++) &#123; num = r.nextInt(10); System.out.println(\"区间[0，10)上的随机数：\" + num); &#125; // 控制区间 for (int i = 0; i &lt; 10; i++) &#123; num = r.nextInt(5) + 1; System.out.println(\"区间[1,6)上的随机数：\" + num); &#125; &#125;&#125; ArrayList类作用：代替对象数组存在 对象数组创建Person标准类 1234567891011121314151617181920212223242526272829public class Person &#123; String name; // 姓名 int age; // 年龄 // 构造方法 public Person() &#123; &#125; public Person(String name, int age) &#123; this.name = name; this.age = age; &#125; // setter/getter方法 public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125; public int getAge() &#123; return age; &#125; public void setAge(int age) &#123; this.age = age; &#125;&#125; 创建使用对象数组 123456789101112131415161718192021// 对象数组// 创建格式：类名[] 对象名 = new 类名[元素个数]public class Demo01Array &#123; public static void main(String[] args) &#123; Person[] array = new Person[3]; // 创建对象数组 Person one = new Person(\"迪丽热巴\",18); Person two = new Person(\"古力娜扎\",28); Person three = new Person(\"马尔扎哈\",38); array[0] = one; array[1] = two; array[2] = three; System.out.println(array[0]); // 地址值 System.out.println(array[1]); // 地址值 System.out.println(array[2]); // 地址值 System.out.println(array[1].name); // 古力娜扎 &#125;&#125; ArrayList类初识ArrayList12345678910111213141516171819202122232425262728/** ArrayList类* ArrayList集合的长度是可以随时变化的* 格式：ArrayList&lt;E&gt; 对象名 = new ArrayList&lt;&gt;();* 其中&lt;E&gt;代表泛型* 泛型：也就是装在集合中的所有元素，全都是是统一类型。* 注意：* 泛型只能是引用类型，不能是基本类型。* 对于ArrayList集合来说，直接打印得到的不是地址值，而是内容* 如果为空，则打印结果为 []* */import java.util.ArrayList;public class Demo02ArrayList &#123; public static void main(String[] args) &#123; ArrayList&lt;String&gt; list = new ArrayList&lt;&gt;(); System.out.println(list); // [] list.add(\"赵丽颖\"); System.out.println(list); // [赵丽颖] list.add(\"迪丽热巴\"); list.add(\"古力娜扎\"); list.add(\"玛尔扎哈\"); System.out.println(list); // [赵丽颖, 迪丽热巴, 古力娜扎, 玛尔扎哈] &#125;&#125; ArrayList的常用方法1234567891011121314151617181920212223242526272829303132333435363738394041/*ArrayList中常用的方法。public boolean add(E e); 向集合当中添加元素，参数的类型和泛型一致，返回值代表添加是否成功。public E get(int index); 从集合中获取元素，参数是索引编号，返回值就是对应位置的元素，索引值从0开始数。public E remove(int index); 从集合当中删除元素，参数是索引编号，返回值就是所被删除的元素，索引值从0开始数。public int size(); 获取集合中元素的个数。*/import java.util.ArrayList;public class Demo03ArrayListMethod &#123; public static void main(String[] args) &#123; ArrayList&lt;String&gt; list = new ArrayList&lt;&gt;(); System.out.println(list); // [] // 添加元素 list.add(\"赵丽颖\"); list.add(\"迪丽热巴\"); list.add(\"古力娜扎\"); list.add(\"玛尔扎哈\"); System.out.println(list); // [赵丽颖, 迪丽热巴, 古力娜扎, 玛尔扎哈] // 获取元素 String name = list.get(2); System.out.println(\"获取到的人名：\" + name); // 获取到的人名：古力娜扎 // 删除元素 String remove = list.remove(3); System.out.println(\"被删除的人是：\" + remove); // 被删除的人是：玛尔扎哈 System.out.println(list); //[赵丽颖, 迪丽热巴, 古力娜扎] // 获取元素个数 int size = list.size(); System.out.println(size); // 3 &#125;&#125; 包装类123456789101112131415161718192021222324252627/*包装类泛型只能是引用类型，不能是基本类型。为了集合存放基本类型，可以使用包装类。基本类型 包装类（引用类型，包装类位于java.lang包下）byte Byteshort Shortint Integer 【特殊】long Longfloat Floatdouble Doublechar Character 【特殊】boolean Boolean*/import java.util.ArrayList;public class Demo05ArrayListBasic &#123; public static void main(String[] args) &#123; ArrayList&lt;Integer&gt; list = new ArrayList&lt;&gt;(); list.add(100); list.add(200); list.add(300); int num = list.get(1); System.out.println(num); // 200 &#125;&#125; 集合与方法1234567891011121314151617181920212223242526272829303132333435363738// 集合做方法的参数和返回值// 用一个大集合存入20个随机数字，然后筛选其中的偶数元素，放到小集合当中。import java.util.ArrayList;import java.util.Random;public class Demo04ArrayListReturn &#123; public static void main(String[] args) &#123; Random r = new Random(); ArrayList&lt;Integer&gt; bigList = new ArrayList&lt;&gt;(); // 在大集合中放入20个随机数字 for (int i = 0; i &lt; 20; i++) &#123; int num = r.nextInt(20) + 1; // 1~20的随机数 bigList.add(num); &#125; // 调用自定义方法，定义，打印小集合 ArrayList&lt;Integer&gt; smallList = getSmallList(bigList); System.out.println(smallList); &#125; // 定义方法 // 参数和返回值都是集合 public static ArrayList&lt;Integer&gt; getSmallList(ArrayList&lt;Integer&gt; bigList) &#123; ArrayList&lt;Integer&gt; smallList = new ArrayList&lt;&gt;(); // 筛选偶数元素，放入小集合 for (int i = 0; i &lt; bigList.size(); i++) &#123; int num; if (bigList.get(i) % 2 == 0) &#123; num = bigList.get(i); smallList.add(num); &#125; &#125; return smallList; &#125;&#125;","categories":[{"name":"Java学习","slug":"Java学习","permalink":"http://yoursite.com/categories/Java%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"}]},{"title":"Java学习日记2——类与对象","slug":"Java学习日记2——类与对象","date":"2020-05-11T08:07:58.285Z","updated":"2020-05-11T09:35:56.160Z","comments":true,"path":"2020/05/11/Java学习日记2——类与对象/","link":"","permalink":"http://yoursite.com/2020/05/11/Java%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B02%E2%80%94%E2%80%94%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1/","excerpt":"学习Java每一天","text":"学习Java每一天 JDK提供的Arrays类中的toString方法12345678910111213// 使用面向对象的方法打印数组arrayimport java.util.Arrays; // 这行代码是自动生成的，不用管。public class Demo01PrintArray &#123; public static void main(String[] args) &#123; int[] array = &#123;10, 20, 30, 40, 50, 60&#125;; // JDK给我们提供的Arrays类中，有一个toString方法 // 能把数组变成我们想要的字符串 System.out.println(Arrays.toString(array)); &#125;&#125; 类与对象的定义和使用类的定义：类中有两个组成部分：成员变量，成员方法。 12345678910111213141516171819202122232425262728293031/** 类与对象：* 类是对象的模板，对象是类的实体。** 定义一个Studnet类，类有两部分组成* 成员变量：* String name; // 名字* int age; // 年龄* 成员方法：* public void eat()&#123;&#125;; // 吃饭* public void sleep() &#123;&#125;; // 睡觉* public void study() &#123;&#125;; // 学习** 注意事项：* 1. 成员变量直接定义在类当中，在方法外边。* 2. 成员方法不要写static关键字。* */public class Student &#123; String name; int age; public void eat() &#123; System.out.println(\"吃饭饭！\"); &#125;; public void sleep() &#123; System.out.println(\"睡觉觉！\"); &#125;; public void study() &#123; System.out.println(\"学习！\"); &#125;;&#125; 类的使用类的基本使用使用上面定义的类，学习类的基本使用方法 1234567891011121314151617181920212223242526272829303132/** 类的使用：* 1. 导包：也就是指出所需要的类在什么位置。* 导包格式：import 包名称.类名称* 例： import cn.itcast.day06.demo01.Student;* 注意；如果和当前类属于同一个包，则导包语句可以省略不写。* 2. 创建对象：* 类名称 对象名 = new 类名称();* 例：Student stu = new Student();* 3. 使用：* 使用成员变量：对象名.成员变量名。* 使用成员方法：对象名 成员方法名(参数)。* */public class Demo02Student &#123; public static void main(String[] args) &#123; // 1.导包 // 位于同一个包，导包可以省略 // 2.创建 Student stu = new Student(); // 3.使用 // 使用成员变量 System.out.println(stu.name); // null System.out.println(stu.age); // 0 // 使用成员方法 stu.eat(); // 吃饭饭 stu.sleep(); // 睡觉觉 stu.study(); // 学习 &#125;&#125; 对象与方法先定义一个Phone类 123456789101112131415// 定义一个手机类public class Phone &#123; String brand; // 品牌 double price; // 价格 String color; // 颜色 public void call(String who) &#123; System.out.println(\"给\" + who + \"打电话\"); &#125; public void sendMessage() &#123; System.out.println(\"群发短信\"); &#125;&#125; 下面使用上面定义的Phone类 对象可以作为方法的参数 1234567891011121314151617181920// 对象作为方法的参数// 格式：public static 返回值类型 方法名(类名 参数名)&#123;&#125;;// 参数接收到的是对象的地址值public class Demo02PhoneParam &#123; public static void main(String[] args) &#123; Phone one = new Phone(); one.brand = \"苹果\"; one.price = 8848.0; one.color = \"玫瑰金\"; method(one); &#125; // 定义对象为参数的方法 public static void method(Phone one)&#123; System.out.println(one.brand); System.out.println(one.price); System.out.println(one.color); &#125;&#125; 对象可以作为方法的返回值 123456789101112131415161718192021// 对象作为方法的返回值// 格式：public static 类名 方法名(参数类型 参数名)&#123;&#125;// 返回值实际上是对象的地址public class Demo03PhoneReturn &#123; public static void main(String[] args) &#123; Phone two = getPhone(); System.out.println(two.brand); System.out.println(two.price); System.out.println(two.color); &#125; // 定义返回值为对象的方法 public static Phone getPhone() &#123; Phone one = new Phone(); one.brand = \"苹果\"; one.price = 8848.0; one.color = \"玫瑰金\"; return one; &#125;&#125; 局部变量和全局变量12345678910111213141516171819202122232425262728293031/** 局部变量和全局变量的不同* 1. 定义的位置不同【重点】* 局部变量：在方法内定义。* 全局变量：载方法外部，直接在类中定义。* 2. 作用范围不同【重点】* 局部变量：只有在方法当中可以用。* 全局变量：整个类中都可以使用。* 3. 默认值不同【重点】* 局部变量：没有默认值。* 全局变量：有默认值。* 4. 内存的位置不同【了解】* 局部变量：位于栈内存。* 全局变量：位于堆内存。* 5. 生命周期不同【了解】* 局部变量：随着方法进栈而诞生，随着方法出栈而消失。* 全局变量：随着对象创建而诞生，随着对象被垃圾回收而消失。* */public class Demo01VariableDifference &#123; String name; public void methodA()&#123; int num1; int num2 = 20; System.out.println(name); // 全局变量可以在整个类中使用，且有默认值。// System.out.println(num1); // 错误！num没有默认值。 &#125; public void methodB()&#123;// System.out.println(num2); // 错误！局部变量只能在定义变量的方法内使用。 &#125;&#125; 面对对象——封装面对对象有三大特征：封装，继承，多态。 封装在Java中体现 方法就是一种封装 123456789101112131415public class Demo02Method &#123; public static void main(String[] args) &#123; int[] array = &#123;10, 20, 30, 50, 6000&#125;; System.out.println(getMax(array)); &#125; // 定义一个方法，返回一个数组的最大值。 public static int getMax(int[] array) &#123; int max = array[0]; for (int i = 1; i &lt; array.length; i++) &#123; max = max &gt; array[i] ? max : array[i]; &#125; return max; &#125;&#125; 关键字private也是一种封装 定义Person类，并将age变量加上private。并学习setter/getter方法 1234567891011121314151617181920212223242526/** 定义Person类，并将age变量加上private。** private效果：可是使加private的变量可以在类中被访问，但无法在类外被直接访问。* 间接访问private变量的方法：添加一对setter方法和getter方法。* 方法名：setter方法和getter方法的方法名格式必须为setXxx和getXxx* 作用：可以防止错误和恶意修改*/public class Person &#123; String name; // 名字 private int age; // 年龄 public void show()&#123; System.out.println(\"姓名：\"+name+\"，年龄：\"+age); &#125; public void setAge(int a)&#123; if(a&gt;=0&amp;&amp;a&lt;=100)&#123; age = a; &#125; else &#123; System.out.println(\"输入数据错误！\"); &#125; &#125; public int getAge()&#123; return age; &#125;&#125; 使用Person类，查看private的效果 1234567891011121314public class Demo03Person &#123; public static void main(String[] args) &#123; Person person = new Person(); person.show(); System.out.println(\"=================\"); person.name = \"赵丽颖\";// person.age = 18; // 错误写法！age有private修饰，无法直接访问。 person.setAge(-20); // 年龄不可以为负数，修改失败！ person.show(); System.out.println(\"=====================\"); person.setAge(18); // 修改成功。 person.show(); &#125;&#125; 注意：boolean类型的成员看变量的getter方法的方法名为isXxx。 this关键字this关键字用于解决成员方法的参数和成员变量重名的问题，下面使用this关键字定义一个Person类。 123456789101112// 定义Person类// 当成员方法中的参数和成员变量重名时，用this关键字来区分// this代指调用方法的对象public class Person &#123; String name; // 姓名 public void sayHello(String name)&#123; System.out.println(this); // 打印调用该方法的对象的地址值 System.out.println(name+\"，你好，我是\"+this.name); &#125;&#125; 可见，this在这里代指调用方法的对象。 构造方法12345678910111213141516171819202122232425262728293031323334353637383940414243/** 构造方法：专门用来创建对象的方法（创建对象时，new后面的那个方法）。* 格式：class 类名(参数类型 参数名)&#123;* 方法体;* &#125;* 注意事项；* 1. 构造方法的名称必须和类名称一样（包括大小写）。* 2. 构造方法不写返回值类型。* 3. 不写构造方法编译器会默认赠送一个没有参数，没有方法体的构造方法。* 4. 一旦编译至少一个构造方法，编译器将不再赠送。* 5. 构造方法是可以重载的。* */public class Student &#123; private String name; // 姓名 private int age; // 年龄 // 构造方法（无参） public Student()&#123; System.out.println(\"构造方法执行啦\"); &#125; // 构造方法（全参） public Student(String name,int age)&#123; this.name = name; this.age = age; &#125; // getter/setter方法 public void setName(String name) &#123; this.name = name; &#125; public String getName() &#123; return name; &#125; public void setAge(int age)&#123; this.age = age; &#125; public int getAge() &#123; return age; &#125;&#125; 标准类1234567891011121314151617181920212223242526272829303132333435363738394041/** 定义一个标准类。* 标准类四个组成部分* 1. 所有成员变量都要用private关键字修饰。* 2. 为每一对成员变量编写一对getter/setter方法* 3. 编写一个无参数的构造方法。* 4. 编写一个全参数的构造方法。** 这样标准的类也叫做Java Bean* 使用Alt+Ins组合键可以生成代码。*/public class Student &#123; private String name; // 姓名 private int age; // 年龄 // 构造方法 public Student() &#123; &#125; public Student(String name, int age) &#123; this.name = name; this.age = age; &#125; public String getName() &#123; return name; &#125; // getter/setter方法 public void setName(String name) &#123; this.name = name; &#125; public int getAge() &#123; return age; &#125; public void setAge(int age) &#123; this.age = age; &#125;&#125;","categories":[{"name":"Java学习","slug":"Java学习","permalink":"http://yoursite.com/categories/Java%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"}]},{"title":"next使用日志（扩展篇）","slug":"next使用日志（扩展篇）","date":"2020-05-04T17:49:40.577Z","updated":"2020-05-13T13:00:56.796Z","comments":true,"path":"2020/05/05/next使用日志（扩展篇）/","link":"","permalink":"http://yoursite.com/2020/05/05/next%E4%BD%BF%E7%94%A8%E6%97%A5%E5%BF%97%EF%BC%88%E6%89%A9%E5%B1%95%E7%AF%87%EF%BC%89/","excerpt":"在基本配置过next后，我想要做更多的美化和扩展，用这篇笔记记录下来我做出扩展的每一步","text":"在基本配置过next后，我想要做更多的美化和扩展，用这篇笔记记录下来我做出扩展的每一步 添加动漫小人在博客根目录下执行命令 1npm install --save hexo-helper-live2d 执行上面代码之后，变可以选择要安装的动画了，选择参考https://huaji8.top/post/live2d-plugin-2.0/ 找到自己喜欢的动画之后，执行下面命令 1npm install live2d-widget-model-koharu 注意，上面命令最后的koharu是你选择的动画名，我这里是以koharu举例 安装完成后，要想要显示出来，还需要在站点配置文件添加下面代码 1234567891011121314151617#二次元live2d: enable: true scriptFrom: local pluginRootPath: live2dw/ pluginJsPath: lib/ pluginModelPath: assets/ tagMode: false debug: false model: use: live2d-widget-model-koharu # 注意这里的koharu是上面安装的动画名字 display: position: right #在屏幕上的显示位置 width: 85 #显示宽度 height: 170 #显示高度 mobile: show: false #手机端是否显示 不想再使用这个插件的时候，可以执行下面命令卸载 1npm uninstall hexo-helper-live2d 方法来源：https://blog.csdn.net/wugenqiang/article/details/88375517 调整内容宽度因为默认内容宽度太窄，代码经常会显示不全，会生成滚动条，看起来特别不方便。 找到文件Hexo/themes/next/source/css/_custom/custom.styl 在里面添加代码 123.header&#123; width: 70%; &#125; /* 80% */.container .main-inner &#123; width: 70%; &#125; /* 80% */.content-wrap &#123; width: calc(100% - 260px); &#125; 注意百分比要一致。 方法来源1：https://github.com/iissnan/hexo-theme-next/issues/759 方法来源2：https://blog.zuiyu1818.cn/posts/NexT_codewidth.html","categories":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/categories/hexo/"}],"tags":[{"name":"hexo主题","slug":"hexo主题","permalink":"http://yoursite.com/tags/hexo%E4%B8%BB%E9%A2%98/"},{"name":"next","slug":"next","permalink":"http://yoursite.com/tags/next/"}]},{"title":"next使用日志（问题篇）","slug":"next使用日志","date":"2020-05-04T07:47:49.916Z","updated":"2020-05-04T17:48:26.891Z","comments":true,"path":"2020/05/04/next使用日志/","link":"","permalink":"http://yoursite.com/2020/05/04/next%E4%BD%BF%E7%94%A8%E6%97%A5%E5%BF%97/","excerpt":"这篇笔记是参照next官方文档操作t过程中遇到的一些问题及解决方法。","text":"这篇笔记是参照next官方文档操作t过程中遇到的一些问题及解决方法。 菜单项的链接正常打开 去掉||前的空格才会生效 第一个斜杠代表博客主页的相对目录，写网址的话需要删除第一个 / 正常使用分类和标签按操作要求打开分类和标签的菜单项之后，发现这两个功能并不能使用，在博客根目录下执行代码 123hexo new page \"about\"hexo new page \"tags\"hexo new page \"categories\" 这三行代码会在博客根目录下的source目录中创建about、tags、categories三个文件夹，并分别创建index.md文件，分别修改这三个文件 1234567# title和date是自动生成的，只需要添加type即可，type引号内是文件名（不带扩展名）# title是博客显示的名字，如果不写，默认显示文件名# date是博客发表时间，如果不写，默认显示文件创建时间title: categoriesdate: 2018-03-02 12:33:16type: \"categories\" 点击日志错误显示侧栏下面的日志应该和归档有相同的效果，但是实际上点击日志只会显示错误代码，解决方法是找到themes/next/_config.yml 文件下将archives：/archives/ || archive 改成archives：/archives/ 未解决问题 点击日程表错误 点击站点地图错误 关于怎么写入内容 标签和分类都是英文","categories":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/categories/hexo/"}],"tags":[{"name":"hexo主题","slug":"hexo主题","permalink":"http://yoursite.com/tags/hexo%E4%B8%BB%E9%A2%98/"},{"name":"next","slug":"next","permalink":"http://yoursite.com/tags/next/"}]},{"title":"Java学习日记1——数组","slug":"JAVA学习日记 1","date":"2020-05-03T12:17:09.305Z","updated":"2020-05-11T09:13:18.965Z","comments":true,"path":"2020/05/03/JAVA学习日记 1/","link":"","permalink":"http://yoursite.com/2020/05/03/JAVA%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0%201/","excerpt":"学习Java每一天","text":"学习Java每一天 IDEA常用快捷键 快捷键 功能 Alt+Enter 导入包，自动修正代码 Ctrl+V 删除光标所在行 Ctrl+D 复制光标所在行的内容，插入光标所在下面 Ctrl+Alt+L 格式化代码 Ctrl+/ 单行注释，再按取消注释 Ctrl+Shift+/ 选中代码注释，多行注释，再按取消注释 Alt+Ins 自动生成代码，toString，get，set等方法 Alt+Shift+向上箭头 移动当前代码 Shift+F6 修改所有同名字符 Alt+/ 代码提示 数组数组的初始化a. 数组的初始化分为 静态初始化 1234567// 一般的静态初始化int[] array0 = new int[]&#123;20, 30, 40&#125;; // 静态初始化的省略格式 int[] array1 = &#123; 5, 25, 35 &#125;; // 分成两步初始化，分成两步来写就不能使用省略格式了 int[] array2; array2 = new int[] &#123; 2, 3, 5 &#125;; 动态初始化 123456// 一般的动态初始化int[] array0 = new int[3];// 分成两步的动态初始化int[] array1;array1 = new int[3];System.out.println(array1); // 直接打印数组名称，得到数组对应的，内存地址哈希值 b. 初始化的默认值 1234567891011121314151617181920/** 使用动态初始化的时候，其中的元素将会自动拥有一个默认值，规则如下：* 1. 如果是整数类型，那么默认值为0；* 2. 如果是浮点类型，那么默认值为0。0* 3. 如果是字符类型，那么默认值为' \\u0000'；* 4. 如果是字符串类型，那么默认值为null；* 5. 如果是布尔类型，那么默认值为false*/public class Demo05ArrayUse &#123; public static void main(String[] args) &#123; int[] array = new int[3]; System.out.println(array); // 内存地址哈希值 System.out.println(array[0]); // 0 System.out.println(array[1]); // 0 System.out.println(array[2]); // 0 array[1] = 123; System.out.println(array[1]); // 123 &#125;&#125; 数组的错误 越界异常 123456789101112// 如果访问数组编号的时候，索引编号不存在，那么将会发生数组索引越界异常public class Demo01ArrayIndex &#123; public static void main(String[] args) &#123; int[] array = &#123; 5, 25, 35 &#125;; // 错误写法 // 不存在第三号元素，所以发生异常 System.out.println(array[3]); &#125;&#125; 空指针异常 123456789101112// 所有索引类型变量，都可以赋值为一个null值。但是代表其中什么都没有。/*数组必须进行new初始化才能使用其中的元素。如果只赋值了一个null，没有进行new创建那么就会发生：空指针异常 NullPointerException*/public class Demo02ArrayNull &#123; public static void main(String[] args) &#123; int[] array = null; System.out.println(array[0]); &#125;&#125; 数组与方法 数组作为方法的参数 12345678910111213141516171819202122/** 数组作为参数* 参数写法：数据类型[] 参数名称* 传输内容：数组的地址* */public class Demo01ArrayParam &#123; public static void main(String[] args) &#123; int[] array = &#123;10, 20, 30, 40, 50, 60&#125;; System.out.println(array); System.out.println(\"====================\"); arrayPrint(array); &#125; // 定义数组作为参数，遍历数组的方法 public static void arrayPrint(int[] array)&#123; System.out.println(array); for (int i = 0; i &lt; array.length; i++) &#123; System.out.println(array[i]); &#125; &#125;&#125; 数组作为方法的返回值 1234567891011121314151617181920212223/* * 数组作为方法的返回值 * 方法定义个格式： public static 数组类型[] 函数名称（）&#123;&#125; * 返回内容；数组的地址类型*/public class Demo02ArrayReturn &#123; public static void main(String[] args) &#123; int[] array = calculate(2,4); System.out.println(array); System.out.println(array[0]); System.out.println(array[1]); &#125; // 定义方法 public static int[] calculate(int a, int b) &#123; int sum = a + b; int ave = sum / 2; int[] array = &#123;sum, ave&#125;; System.out.println(array); System.out.println(\"==================\"); return array; &#125;&#125;","categories":[{"name":"Java学习","slug":"Java学习","permalink":"http://yoursite.com/categories/Java%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"}]},{"title":"yilia主题优化日志","slug":"yilia主题优化日志（持续更新）","date":"2020-05-02T04:52:29.258Z","updated":"2020-05-04T17:17:31.435Z","comments":true,"path":"2020/05/02/yilia主题优化日志（持续更新）/","link":"","permalink":"http://yoursite.com/2020/05/02/yilia%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96%E6%97%A5%E5%BF%97%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%EF%BC%89/","excerpt":"刚开始创建博客我使用的yilia主题，后来发现next有官方文档可以更方便地配置，换成了next主题，这是我刚开始使用yilia主题是找到的部分配置方法","text":"刚开始创建博客我使用的yilia主题，后来发现next有官方文档可以更方便地配置，换成了next主题，这是我刚开始使用yilia主题是找到的部分配置方法 一. 所有文章 功能刚clone的yilia主题左边的所有文章功能不能用，要进行一下操作 在博客根目录下执行命令 1cnpm i hexo-generator-json-content --save 在hexo的配置文件_config.yml最后添加 123456789101112131415161718jsonContent: meta: false pages: false posts: title: true date: true path: true text: false raw: false content: false slug: false updated: false comments: false link: false permalink: false excerpt: false categories: false tags: true 参考地址：https://blog.csdn.net/qq_32337109/article/details/78756041 二、截断文章博客内容默认是全部显示出来，这样显示全文按钮即没用又不好看。 截断标记 写博客的时候，在想要截断的地方写 1&lt;!--more--&gt; 此时就可以在这个位置截断文章了 隐藏截断标记 使用截断标记虽然可以实现截断文章的效果，但会出现一个标记，和显示全文按钮功能重复，我们可以打开yilia目录下的_config.yml文件，找到 1excerpt_link: more 把more改为空格，完成。 参考地址：https://www.jianshu.com/p/46660e506da5 三、基础设置12345678# Sitetitle: 站点标题subtitle: 站点副标题description: 站点描述 # 站点描述keywords: # 博客关键字author: 作者 # 作者language: en # 语言timezone: '' # 时间 四、在左侧显示文章总数在 themes\\yilia\\layout_partial 文件夹下的left-col.ejs文件中 1234567&lt;nav class=\"header-menu\"&gt; &lt;ul&gt; &lt;% for (var i in theme.menu)&#123; %&gt; &lt;li&gt;&lt;a href=\"&lt;%- url_for(theme.menu[i]) %&gt;\"&gt;&lt;%= i %&gt;&lt;/a&gt;&lt;/li&gt; &lt;%&#125;%&gt; &lt;/ul&gt;&lt;/nav&gt; 后加上 123&lt;nav&gt; 总文章数 &lt;%=site.posts.length%&gt;&lt;/nav&gt;","categories":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/categories/hexo/"}],"tags":[{"name":"hexo主题","slug":"hexo主题","permalink":"http://yoursite.com/tags/hexo%E4%B8%BB%E9%A2%98/"},{"name":"yilia","slug":"yilia","permalink":"http://yoursite.com/tags/yilia/"}]},{"title":"Hexo blog部署","slug":"Hexo blog部署","date":"2020-05-01T14:18:39.446Z","updated":"2020-05-04T17:11:23.198Z","comments":true,"path":"2020/05/01/Hexo blog部署/","link":"","permalink":"http://yoursite.com/2020/05/01/Hexo%20blog%E9%83%A8%E7%BD%B2/","excerpt":"这篇笔记记录了我开始使用博客的详细操作步骤","text":"这篇笔记记录了我开始使用博客的详细操作步骤 1. 下载安装node.js下载node.js 2.Hexo blog部署12npm install -g cnpm --registry=https://registry.npm.taobao.org //安装淘宝镜像cnpm install -g hexo-cli //安装hexo 在命令行操作的初始目录下创建文件夹 blog 12345cd blog //进入blog文件夹hexo init //创建一个博客hexo g //生成博客hexo s //在本地查看生成的blogcnpm install hexo-deployer-git --save //安装推到GitHub的插件 在GitHub上创建一个名为GitHub名.github.io的仓库，打开blog文件夹，找到并修改文件_config.yml，修改部分在底部，这是修改结果 123type: gitrepo: https://github.com/GitHub名/GitHub名.github.io.gitbranch: master 命令行 1hexo d //部署到远端 以上，hexo博客部署完成，此时https://GitHub名.github.io就可以访问自己的博客。 3.更换主题以更换yilia主题为例 yilia主题网址：https://github.com/litten/hexo-theme-yilia 12cd blog //进入blog文件夹git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia 打开blog文件夹，找到并修改文件_config.yml，在的 73 行左右，可以看到配置的默认主题theme: landscape，所对应的是 themes 目录下的 landscape 目录。把landscape改为yilia。 1theme: yilia 命令行 1234hexo clean //清理hexo g //生成博客hexo s //本地查看hexo d //部署到远端 更换主题完成。","categories":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/categories/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"}]}],"categories":[{"name":"HTML学习","slug":"HTML学习","permalink":"http://yoursite.com/categories/HTML%E5%AD%A6%E4%B9%A0/"},{"name":"Java学习","slug":"Java学习","permalink":"http://yoursite.com/categories/Java%E5%AD%A6%E4%B9%A0/"},{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/categories/hexo/"}],"tags":[{"name":"HTML","slug":"HTML","permalink":"http://yoursite.com/tags/HTML/"},{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"},{"name":"hexo主题","slug":"hexo主题","permalink":"http://yoursite.com/tags/hexo%E4%B8%BB%E9%A2%98/"},{"name":"next","slug":"next","permalink":"http://yoursite.com/tags/next/"},{"name":"yilia","slug":"yilia","permalink":"http://yoursite.com/tags/yilia/"},{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"}]}